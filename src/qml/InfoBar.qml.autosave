import QtQuick 2.12
import QtQuick.Window 2.2
import QtQuick.Extras 1.4
import QtQuick.Controls 2.5
import QtGraphicalEffects 1.12



Item {
    id: root

    property var musicText:""
    property var callText:""
    //EDIT
    property string newDirectionSource
    property string directionSource
    property bool directionActive
    property string speedLimitText
    property int speedLimit
    property string battSource
    property bool recordingVisible
    property bool phoneVisible
    property bool musicVisible
    property bool instructionMusicAnimationFadeIn
    property bool instructionMusicAnimationFadeOut
    property bool instructionCallAnimationSlideIn
    property bool instructionCallAnimationSlideOut
    property string speedLimitColorIndicator
    property var instructionMusicBarOpacity
    property var musicTextPaths
    property var musicTextPathsIndex

    property string infoBarText:""
    property string infoBarDistText:""

    property int currentSpeed:0
    property int prevSpeed:0
    onCurrentSpeedChanged: {
        speedometerAnim.start()
        prevSpeed = currentSpeed
    }

    onInfoBarTextChanged: { 
        directionActive = true
        directionActive = false
    }

    //Generates a random number
    function getRandomIntInclusive(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min
    }

    //Container for all objects
    Rectangle {
        id: container
        width: 640
        height: 127.5
        color: "#99000000"

        //Load in Roboto Medium font
        FontLoader {
            id: localFont
            source: "qrc:/fonts/Roboto-Medium.ttf"
        }

        //Image to be replaced by new image (fades out)
        Image {
            id: newDirection
            source: root.newDirectionSource
            smooth: true
            opacity: 1
            width: 130
            height: 85
            anchors.left: parent.left
            anchors.top: parent.top

            //On clicked change to mouse-over state
            MouseArea {
                id: mouseArea
                anchors.fill: parent
                anchors.margins: -10
                onClicked: parent.state = "mouse-over"
            }

            //Scale and opacity property changes
            states: [
                State {
                    name: "mouse-over"
                    when: root.directionActive
                    PropertyChanges {
                        target: oldDirection
                        scale: 1
                        opacity: 1
                    }
                    PropertyChanges {
                        target: newDirection
                        scale: 0.6
                        opacity: 0
                    }
                },
                State {
                    name: "initial-state"
                    when: !root.directionActive
                }
            ]

            //Animations for fading in and out
            transitions: Transition {
                to: "initial-state"
                from: "mouse-over"
                NumberAnimation {
                    id: arrowChangeAnim
                    properties: "scale, opacity"
                    easing.type: Easing.InOutQuad
                    duration: 1000
                }
            }
        }

        //Image to replace old image (fade in)
        Image {
            id: oldDirection
            source: root.directionSource
            smooth: true
            opacity: 0
            anchors.fill: newDirection
            width: 130
            height: 85
            anchors.left: parent.left
            anchors.top: parent.top
        }

        //Speed limit located on the right of direction arrow
        Rectangle {
            id: speed_limit
            width: 130
            height: 85
            anchors.left: oldDirection.right
            anchors.top: parent.top
            color: "transparent"

            //Circle
            Rectangle {
                id: speedLimit_circle
                width: 64
                height: width
                radius: width / 2
                color: "transparent"
                anchors.centerIn: parent
                border.color: speedometer.speedChange >= root.speedLimit ? "red" : "#00c7ff"
                border.width: 000000000000000000
                Text {
                    //id: speedLimit_text
                    text: root.speedLimitText
                    anchors.centerIn: parent
                    color: speedometer.speedChange >= root.speedLimit ? "red" : "#00c7ff"
                    font.pixelSize: 30
                }
            }
        }

        //Current speed on the middle of the screen
        Item {
            id: current_speed
            width: 120
            height: 85
            //anchors.horizontalCenter: parent.horizontalCenter
            anchors.left: speed_limit.right
            anchors.top: parent.top

            //Speed simulation
            Text {
                id: speedometer
                text: speedChange
                anchors.centerIn: parent
                anchors.bottomMargin: -8
                color: "white"
                property int speedChange: prevSpeed

                font {
                    family: localFont.name
                    pixelSize: 70
                }

//                onSpeedChangeChanged: {
//                    console.log("on speed changed , prev:",prevSpeed,"current:",currentSpeed)
//                    prevSpeed = currentSpeed
//                }

                SequentialAnimation {
//                    loops: Animation.Infinite
                    id:speedometerAnim
                    running: false
                    NumberAnimation {
                        target: speedometer
                        property: "speedChange"
//                        from: speedChange
                        to: currentSpeed
                        duration: 300
//                        onFromChanged: {
//                            console.log("from chgd, prev:",prevSpeed,"current:",currentSpeed);
//                            prevSpeed = currentSpeed;
//                        }




                    }




//                    NumberAnimation {
//                        target: speedometer
//                        property: "speedChange"
//                        to: currentSpeed
//                        duration: root.getRandomIntInclusive(2000, 6000)
//                    }

//                    NumberAnimation {
//                        target: speedometer
//                        property: "speedChange"
//                        to: root.getRandomIntInclusive(20, 200)
//                        duration: root.getRandomIntInclusive(2500, 6000)
//                    }

//                    NumberAnimation {
//                        target: speedometer
//                        property: "speedChange"
//                        to: root.getRandomIntInclusive(9, 78)
//                        duration: root.getRandomIntInclusive(800, 6000)
//                    }

//                    NumberAnimation {
//                        target: speedometer
//                        property: "speedChange"
//                        to: root.getRandomIntInclusive(200, 300)
//                        duration: root.getRandomIntInclusive(600, 10000)
//                    }
                }

                //Generates a random number
                function getRandomIntInclusive(min, max) {
                    return Math.floor(Math.random() * (max - min + 1)) + min
                }
            }
        }

        //Unit for speed km/h
        Item {
            id: kmPerH
            width: 122.5
            height: 85
            anchors.left: current_speed.right
            anchors.top: parent.top
            Text {
                //id: kmPerH
                text: "km/h"
                anchors.left: parent.left
                anchors.bottom: parent.bottom
                anchors.leftMargin: 5
                anchors.bottomMargin: 10

                color: "white"
                font {
                    family: localFont.name
                    pixelSize: 30
                }
            }
        }

        //Battery on the top right
        Image {
            id: batteryIcon
            source: root.battSource
            width: 137.5
            height: 42.5
            anchors.left: kmPerH.right
            anchors.top: parent.top
        }

        //Recording on
        Image {
            //id: recording
            width: 137.5
            height: 42.5
            anchors.right: parent.right
            anchors.top: batteryIcon.bottom
            //        anchors.left: kmPerH.right
            //        anchors.bottom: infoBarTexts.top
            source: "qrc:/Icons/Dot(2).png"
            visible: root.recordingVisible
        }

        //Distance left
        Item {
            id: distanceLeft
            width: 130
            height: 42.5
            anchors.left: parent.left
            anchors.top: oldDirection.bottom
            property string distLeft: "0.5"
            Text {
                text: infoBarDistText
                anchors.centerIn: parent
                color: "white"
                font {
                    family: localFont.name
                    pixelSize: 30
                }
            }
        }

        //Direction instructions bar
        Item {
            id: infoBarTexts
            width: 490
            height: 42.5
            anchors.left: distanceLeft.right
            anchors.top: speed_limit.bottom
            anchors.leftMargin: 10
            clip: true
            Text {
                id: text_field
                //text: "Keep  on Pan Island Highway"
                text: infoBarText
                verticalAlignment: Text.AlignVCenter
                color: "white"

                font {
                    family: localFont.name
                    pixelSize: 30
                }

                NumberAnimation on x {
                    //id: textcallAnimation
                    from: 630
                    to: -490
                    //to: -textMetrics.tightBoundingRect.width
                    loops: Animation.Infinite
                    duration: 10000
                }
            }

            TextMetrics {
                id: textMetrics
                font: text_field.font
                text: text_field.text
            }
        }

        //Color bar
        Rectangle {
            id: color_bar
            width: 640
            height: 2.5
            color: speedometer.speedChange >= speedLimit ? "#ff0025" : root.speedLimitColorIndicator
            anchors.left: parent.left
            anchors.right: parent.right
            anchors.top: distanceLeft.bottom
            layer.enabled: true
            layer.effect: Glow {
                //id: glow
                samples: 10
                radius: 10
                spread: 0.5
                color: color_bar.color
                transparentBorder: true
            }
        }

        //Phone icon
        Image {
            //id: phone
            source: "qrc:/Icons/Phone(2).png"
            width: 137.5
            height: 42.5
            anchors.left: kmPerH.right
            anchors.bottom: infoBarTexts.top
            visible: root.phoneVisible
        }

        //Music icon
        Image {
            //id: music
            source: "qrc:/Icons/Music(2).png"
            width: 137.5
            height: 42.5
            anchors.left: kmPerH.right
            anchors.bottom: infoBarTexts.top
            visible: root.musicVisible
        }

//        Connections {
//            target: main
//            onMessageRearView: {
//                musicBar.textToUse = musicText
//                //console.log(instructionMusicBarOpacity)
//        }
//        }

//        Main{
//            id: main
//        }

        //Music bar on the bottom of the UI (fade in/out)
        BlueGreen_Bar {
            id: musicBar
            width: 620
            height: 55
            opacity: 0
            strokeStyleColor: "#00c6ff"
            fillStyleColor: "#00c6ff"
            //textToUse: musicTextPaths[musicTextPathsIndex % musicTextPaths.length]
            textToUse: musicText
            imageSource: "qrc:/Icons/music_logo_white.png"
            instructionMusicBarDropShadowVisible: false

            onOpacityChanged: {
                instructionMusicBarOpacity = musicBar.opacity
                if (callBar.opacity == 1) {
                    instructionMusicBarDropShadowVisible = true
                }
                else {
                    instructionMusicBarDropShadowVisible = false
                }
                //console.log(instructionMusicBarOpacity)
            }

            //Music bar fading in animation
            NumberAnimation on opacity {
                //id: anim
                from: musicBar.opacity
                to: 1
                duration: 1000
                running: root.instructionMusicAnimationFadeIn
                alwaysRunToEnd: true
            }

            //Music bar fading out animation
            NumberAnimation on opacity {
                from: musicBar.opacity
                to: 0
                duration: 1000
                running: root.instructionMusicAnimationFadeOut
                alwaysRunToEnd: true
            }
        }

        //Phone bar on the bottom of the UI (slide in/out)
        BlueGreen_Bar {
            id: callBar
            width: 620
            height: 55
            visible: true
            x: -620
            strokeStyleColor: "#00f264"
            fillStyleColor: "#00f264"
            textToUse: callText
            imageSource: "qrc:/Icons/phone_logo_white.png"
            instructionCallBarDropShadowVisible: false

            onXChanged: {
                if (callBar.x == 0) {
                    instructionCallBarDropShadowVisible = true
                } else {
                    instructionCallBarDropShadowVisible = false
                }

                //console.log(callBar.x)
            }

            //Phone bar sliding animation from left to right
            NumberAnimation {
                //id: instructionCallAnimation
                target: callBar
                alwaysRunToEnd: false
                property: "x"
                from: callBar.x
                to: 0
                duration: 800
                running: root.instructionCallAnimationSlideIn

                Component.onCompleted: {
                    console.log(instructionCallAnimationSlideIn)
                }
            }

            //Phone bar sliding animation from right to left animation
            NumberAnimation {
                //id: instructionCallAnimation1
                target: callBar
                alwaysRunToEnd: false
                property: "x"
                from: callBar.x
                to: -620
                duration: 800
                running: root.instructionCallAnimationSlideOut
            }
        }
    }
}
